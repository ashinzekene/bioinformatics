import sys
import os
from random import randint
from random_number import RandomNumber

sys.path.append(os.path.abspath("."))

from week_3.motif_profile import ProfileWithLaplace
from week_3.score import Score
from week_3.profile_most_probable_kmer import ProfileMostProbableKMer
from week_4.profile_randomly_generated_kmer import ProfileRandomlyGeneratedKmer

def GibbsSampler(dnas, k, t, N):
    motifs = randomKmers(dnas, k)
    best_motifs = motifs[:]
    best_motif_score = Score(best_motifs)
    for _ in range(N):
        i = randint(0, t-1)
        motifs_x = motifs.copy()
        motifs_x.pop(i)
        profile = ProfileWithLaplace(motifs_x)
        motifs[i] = ProfileMostProbableKMer(profile, k, dnas[i])
        if Score(motifs) < Score(best_motifs):
            best_motifs = motifs[:]
            best_motif_score = Score(motifs)
    return best_motifs, best_motif_score


def randomKmers(dnas, k):
    kmers = []
    for dna in dnas:
        i = randint(0, len(dnas[0])-k)
        kmers.append(dna[i:i+k])
    return kmers
    

if __name__ == "__main__":
    dnas = [
        "GTCATTTGACGCATAGCGATAACTAGGTTGGCTTGCAGTGCAGATCCGAAGCTTTCCCTTAGCTCGGCGACTTTCTGTCTGGGCTTTCCTTGGTTAGCTCTATTTCTCGGTCGAGGTTCCCTTAGGGCTCTCTGCTCTAGCACTACTGACGCTATAGCTGGCCATGCATGAGTCCAGTCGGCCAATCTGCAGACCAACCTAATCGAATAAGAAAGCGTGCTACCAAGCAACCCCAAAGCTGGGAGGGGTGAGCGTCAAAACCGGGTCCTCAATGCTGTAACTCAAATCATCCCGTAGTTACTGAATGTCATTTGACGCATA",
        "GCGATAACTAGGTTGGCTTGCAGTGCAGATCCGAAGCTTTCCCTTAGCTCGGCGACTTTCTGTCTGGGCTTTCCTTGGTTAGCTCTATTTCTCGGTCGAGGTTCCCTTAGGGCTCTCTGCTCTAGCACTACTGACGCTATAGCTGGCCATGCATGAGTCCAGTCGGCCAATCTGCAGACCAACCTAATCGAATAAGAAAGCGTGCTACCAAGCAACCCCAAAGCTGGGAGGGGTGAGCGTCTCGCGCTTTGTTGTCAAAACCGGGTCCTCAATGCTGTAACTCAAATCATCCCGTAGTTACTGAATGTCATTTGACGCATA",
        "GTAAGAGCGTTCAAGCGAATAATCTGAGTTTAGGGGCCGTGATCTCCGATAGTGTACAGCCGAGACTTGAGAGATTTTAACAATAGGGTCTAGGATCATTAGGAAGAGTGTCATCGCATTTGTTATCGGGGCTAAGCTACATTGCGTCGATCTTAACTCAACACTCAAAATTTTGCTCAGTAAGAATTTAACTGTTAACCACGCGAGCATTCCAGCTTCCGAGCTCCCGAAGAAGTCCCCCCCACTAATCGTTCTCGGACCACCTAGCTGTGCCAGGACAATAGTCGATGGCGGAAAGCCTCCGAAGCGGGCCCAGACCTC",
        "CACGGCCCACTTGCGAGGTAGCCAATTCACCGACCAACAATCGACGGGTCCCCGCGAGGACTGGCGTCTATGAAGGAGCTTGTGACAATCCTCACGACTTGTACACGCCGGCCTCTGGGCGTTCGGTCTACTCCCCTGGGGCGGATAGCATGTCCGTGTGGACTGCGTGGTCGACGGGTTAGCGTCATGACCTTTGTTCCACCACAGGGGGCCGGTAACGTTGCTTCGTGTGCCAGACGACCCTTGGGAGGTTCGGGGGGTCCGTCAACGATCTGGAAATACAGGGCATCTACATAAACGTGACGCTCACTTCCTACTCCG",
        "CCTAACGCGACACTACTCATTCCACTCAATCCTAAACTAGCCCAATACGAATAATTTCGGAACCCTATGGTCTAATCGCTTATCCCTAGACCCCCCAGGAGGCCATCCGCGACTTGTGGTGGGCCGCTTTGTTTAGTGCACGACGGTGGCTGGTATAGTCTCGGGGCACGTTAAGGCGCCTACTCCCTCACATAAATAATAGTAGAATCAGTTTAACGGAAAGTAAATCCGTTGGTTGCCCGTGACCAGGTAGCGTTAATTCTACTATCTGATGCTTTATAACGTAGAGTTGTTACCGACCAGTAGAAAACTGTAACTAGA",
        "AGATATAGGCGATTAACGCCCCCGCCTTCTTAGCAGGGTAACCGTAGTTGCCAGACTCTCGCTGCGTTTGAGTTGCCCCGCCTAGAGGTGGGTCACGAGCTTTGTTCTAGTCGAATCCTAGATGCCGTGGCGGCGCACCCTGCTCTTATAAAGCTCCTGCAATCGGTTTGCGACCTGCTAGGATGGAGCTGTGTCCCAAAAAAGGAGCGGGAGAATCGCACTGCTCAACCTCCACACCAACAAACGTGTACGTGTCCGTCGTTCCTGTTTCAGATGGGAATTGGAATGAAGCGGACTTATCATACGTTCAATTATTCATCC",
        "CACCTACTGCAAGGTAAGTCGTCATCCAAGTTGTTGGCTATTCATTAGATCCGAGAGTGGTAAAACGACGAGGGCGTTACCAACCTTGTTTCATGTCCCTGAGAGCGTACATCAAGGCCATTGGACTGTTACAGTAACAGGTTGCGCTGAACCAGATAGCCGGTGTTATCTCATGCGACACTCTCTAGGTATCTCGCGGGGTCACGTACTCAGTTCCAGCAGATAGGCTGTCGTCAGAGTACAATCTCACTTCCAGATTCAGACGGCATGTGCGGAGACAAGAGCGCGACTACCCTCAGCCGTATACTCTGAGTATGTGGA",
        "TTTAGTACAAGGGCGTCGCAAGAAATGTGACAAGACATAGACAATCATCGCACTCCCCGTTACAATGCTCACGTAACACACCGTATATCTGTGTAATAGGTACAGAATACACATCACACTGGCCCCATATACACCCCGGCCTACAAAAGCTTGATGTGATTCTGCAGAGAAGAGCGGTTCATCCGCTTTGGAGAGTCACTTTCGGCGGTGACTGCTGGGTGGGAGGGAAGGGAGTGGGTTCGATGTTAAGTTCGCATATGCGCTGAAGAGGATTGCGTCAGTCATAGTAAGGCAGCTCGCCAGTATTATGCGGAAATGCCT",
        "GCGGCAAGACAAGGGCCACTGGAGACGTCGGAGTGAATCTTAAACTTACCGTATAGTGCACAAATTGGAAGGTCCAGCAGTAACCCCACCGGGCCGGTGCTTGACCAGCAGGGCGTAGTCTAGTGTGTCAACTTCCCGAGGAGTATGGAAAGTCCGACAGGCCAACAGGAGCGTTCGGTTACATTGGAAATCGGTCATCCGCTTCTCTGCTGTGATCCCGTTAACGTGACAGCACATCGACCCCCTTTCGACCGGCTCCCCATCAATCGGCGTGTTTCTTAAGGCCAACCGAGGTCGGGAGCCTCCATGCCTATGGCAGCA",
        "GTAAGTTGCGGACACTCCGTTCACACCCTTTCAACGACGCTTATATAAAATAGACTGTGAACTCATCGGAACTAGCAGAATGTCGCACGAACCGGCTGCGGCATCTCCTTTTTCGATTCCCAGTAGGCAGGCTGGCTTCCTCTCATAGCTATAAGCTGTACACTAAACCTGGGGCGAAACGGAACGTTGGTGTCTCAGTACGAAATTCCGAAAGCAGGTGTCATGTCATCCGCTGCATTAGTCGTTCGTGCGTTTGTGTTGGCCTAATGCATGCTGATGAGCCTCTTTGCGATTGGGTAACTACTAGGCACGCGATATGGC",
        "CCCTTCAAGTTCAGGCCGGTCCCGTGTGTCGGGCCCACCGCATATGCCCGATAGTAGTTCAACCGGTGAATTAATGAGGGACTCCGCTTTGTTAAATGCGTCAGAGCGCAAGGTTCGCACTTTCGTGTTAGGACCGCTTCTCCTCTATGCCGTTTCCGTAGATTTTCGGTAGCCTTTGTCGCACTGGTATCGGGCGAGCTGCGGGTGCAGAGTTCCCCGTCATGCGCGTTCGTATTTGGGGGTTCACAGGTCCGCTTACTAGGCGTGGAGCGACTTAGGGTAAAGTTATCTATGAGCGTGGGCCATAAAAGATTCATTGTT",
        "AGGGTCATCTAATTTGTTGAAACAATTCGTGACGGACGGCTTTCGCTGAGGGCCCACCATAGGTGCAAAACTCGCCAAGAGGAGCATGCTCTTGTGGTAAGTAGCGAAAGAGGTCTATTTTTTTAATGCTAATTACCTTGCTGCGTTGAACGCTTCGCCTCAGAGTCCCTATGATATCATAATGTGGGTCACCCTTCGGGGACGTATTATCGGTATTTGAACTGCCCTGCATACCCCTGGCCCGGCAGCCCTTAACAAGAGGTACCATGGATAATACTTGTTAGATTTAAGCGTTACTGCAAAGCAAAAAACCCGCAACAC",
        "GACGACGTGCGTTTTTGCCGTTCGGCTGTGATCTCTTCCATCGTGTCACAGGCTTTGTTCCAACGAATGCGGGGGTAGGATCACAATACTAAGGTCAATTTATAGACGCCATTGAAAAGGACGATTAACAGTAGAGGACCAGCCCATGTCGCTCGGGTCGCGCCATAAGTCTGCCTCGAAAGAGTGCGAGACCCGAAGAGACATGACCCAATCTTGCTCGACCGGCGGTGTTTGTGCCCTGACAACGCCCTGCGAATCGGCCGGTATTCGATTCTATTACCTGAGATAGACAGGACCAGCGTAGTCTACCTGTCATATGCG",
        "GTTCACCTAATCGGCCACCATTTTAAGGCTTCACTTTTATAGACGCCTCTCTGGTCGGTGCCGCAGCAGCTGGGGCTACGTTCCTACGCCTGGACCATCCCTTTCAGCGCGGGTCTTAGGTTATGCCATGTAGGTCAGGTACGCATCCGCTTTGTACCCTATAATCCGATCCCCAATGCGAATGTTGAATTAGCTTCAGAAGGTGTCATGTGCGTGGTTGTGTTTTAACTCTGACATAAGGAGTTACGTTGTGGATGTCCCAATAAGAAAAGCGTCGACGGCCAGACGGCAAGTGCTAGCCTCGTTCCCGCGGAGCAGCTT",
        "TTTTAGACCACTGAGGGACCAACCCTACAAGTCCGTCATGGAATTGCCTAGGGCTTAGCGTGGAGGGGTATGCTCCGAGAGAATCGCAGCCCCTGAACTATTTTCCTTTACCCAGTATCCGCTTTGTTCTCAAAATTAAACTTTTGAGTGGCTTTTTAGACGAACGGCGACACTCGTAGCCTTCAGAATGGCAGCCACGGGTGACCGGGGAGGTTGTAGCTCGACACCCCCTTTCTCTGGTGTGAACTGACCCTTAATTACGCGCCTGGCGATTTTCATAGGGGTGTTGTGATCGCCACGGTAGGGCGCCTGCTTTGCTTA",
        "CCTCTCAGAAGTTTTTTTAATCCAAGTGCTGGAGTCTCTCCATAGCGTTTGACGTCGTGATGGTACGAGTTGAACATGCCATTATCAGCGTGCAACGTATTCCATTACGAGCGCGCTCGCCAAGAGTAAGCTCTGCGAGCGAGCATAGTACTCGCGTGAGTCATCCGCTTTAGGGGCTCGGAACCGAGATCGGACTTGTGGAGTCGGCCGGCCCCTACCGTTAGTCCGAGTTGGGAGAGTCTGTATAGTAGCGCGATACGACGTATCCATTTGCGATGGCATTAGATAAAACCTTTGCCATGACTAGAGCAGCTCTTTAGC",
        "GCGGTTATATAGCACGCTTCTTAATGAAGATGTTCCGGGTCGTTGTCTACGGATGCTACTCCGATTACTCAATCATAAACGGATGATGTTAGTGCACGTCATCCGTGCTGTTTTTCGAACACAATACGGATACAGCCCATGATGTGATGCCAAAGTAACTCTGCCAGATTGGGGTACGATCCACCTCGTTATCTGGACATTATGTTCGGCAACTTAACCTATGTTTCCGACTGTCGGCCGGCCTGTGGTGACCACTCTAGGTCACGCTGCCAGGGCCTAATCGTAAAACTGGCTGGTGATAGGTACGATTGGAGCTCGTTT",
        "GTATAAATAAATCTCCTGCTACCCTCCCTGGCGGGTTCTAAGTAACTATAGTGACAGGATTAAGGTAGTTGATTGGATACCTCTCATGCACATACTCAGTTAGGTCATCCGCGGCGTTCTAATCGTCTATAATTGGTAATGTCCTAATACAATCACAAGGTTCGCCAGTCCACGGGCGCTTGCTGTTATTTCCCTCGTCCCTTGGTATCTGTTGGCAAGCCAACACATACTTTTCAGGGACAGACCTTAACGCAACTCCTAACGCGAGGGAAAGCTCTCGTGACGCGAGGTAGGCGATGCTTATATACCAGTTTTAGCAGT",
        "CGTCCCATCAAACGCAGGCTCTGACGTTCACTGTTCGAAGGGTCTATCCCGCTGAACCTGTGGATGTACCAGATCTTCGTCACACCCGTCGTGGCCACCTCTCGGTAAGTGACGACGCTTCTGAACACATCCAGATAAGCTATGTGTCGTTATCTTATATTGCCTTTTAAAAACCTCTCTCGTAATGTTGTCTCGGCCCGGAGGTGACTCCATGGAAAGCGCCTTATAGACGGCAGGAGCTTATGGTGGCTGTCTGTCGCTTTGTTATTTATGGGACATCGAAGTGCTTGTCCGGGCTCATCGACCAGGTTTGTTAGTAAG",
        "GGTCGTACGTACATGGGGGATATGAGTCGTACCATTCCCTGGCGCACGGCCACCACATTGATCAATGGAGCACACACCTCAGGGCGCTGGTCGCATTAGGCATACCCTAAGTTGAGGGGTTAGTTCAACTGACCTGTGCAGGAAATGCTTTCAAACTGTCTTAGTTGACGTTTGTTTAGTTTAGTTCAGCAAGAGTGGCTATCAACACTTGTCACTGTATTGCTCCGGGAGGGTCATTTCCTTTGTTGCTGCCTTTCCCCGAGCATCTTGACTACCTCCCCGCGTAATCAGAGTTCAATGGACAAAGATGGATCAAGCACA"
    ]
    best_motifs = None
    best_score = len(dnas) * len(dnas[0]) * 4

    for i in range(1500):
        motifs, score = GibbsSampler(dnas, 15, 20, 100)
        if score < best_score:
            best_score = score
            best_motifs = motifs
    print(best_score, " ".join(best_motifs))
    # print(best_score, best_motifs)
